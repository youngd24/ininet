#!/usr/local/bin/bash
##############################################################################
#
# INITECH Vendor Accounts Payable Integrated Database (VAPID)
#
##############################################################################

# Title and company name
TITLE="INITECH Financial Systems"
BACKTITLE="INITECH - Accounts Payable / Receivable Dashboard"

# Vars
ACCT_DIR="/export/accounting"
CUSTOMER_DB="$ACCT_DIR/customers.db"
VENDOR_DB="$ACCT_DIR/vendors.db"
VENDOR_INVOICES_DB="$ACCT_DIR/vendor_invoices.db"
CUSTOMER_INVOICES_DB="$ACCT_DIR/customer_invoices.db"
STARTUP_SLEEP="5"

# Prefer GNU awk if present (Solaris-safe fallback)
AWK=/usr/local/bin/gawk
[ -x "$AWK" ] || AWK=/usr/xpg4/bin/awk
[ -x "$AWK" ] || AWK=awk

# Strip CRs and blank lines; ensure file exists
sanitize_db() {
    [ -n "$1" ] || return
    [ -f "$1" ] || { : > "$1"; return; }
    # Remove \r and trailing spaces, drop fully empty lines
    "$AWK" '{ sub(/\r$/,""); sub(/[[:space:]]+$/,""); if (length($0)>0) print }' "$1" > "$1.tmp" && mv "$1.tmp" "$1"
}

# Ensure all data files exist
for FILE in "$CUSTOMER_DB" "$VENDOR_DB" "$VENDOR_INVOICES_DB" "$CUSTOMER_INVOICES_DB"; do
    [[ ! -f "$FILE" ]] && { touch "$FILE" || { echo "Failed to create $FILE"; exit 1; }; }
done

# On startup, sanitize all DBs and show a quick debug line (helps catch wrong paths)
for f in "$VENDOR_DB" "$VENDOR_INVOICES_DB" "$CUSTOMER_DB" "$CUSTOMER_INVOICES_DB"; do
    sanitize_db "$f"
    # Uncomment for one-time debug:
    # printf "DBG: %s -> " "$f"; ls -l "$f" 2>/dev/null | "$AWK" '{print $5" bytes"}'
done

# Ensure accounting directory exists
if [[ ! -d $ACCT_DIR ]]; then
    echo "Creating directory $ACCT_DIR"
    mkdir -p "$ACCT_DIR" || { echo "Failed to create accounting directory"; exit 1; }
fi

echo "Starting up..."
sleep $STARTUP_SLEEP

# ------------------ UTILITIES ------------------

# Get next numeric ID for a pipe-delimited file (ID is field 1)
function next_id() {
    local file="$1"
    [[ ! -s "$file" ]] && { echo 1; return; }
    awk -F'|' 'NF>0 { if ($1+0>max) max=$1+0 } END { print (max?max:0)+1 }' "$file"
}

# Today Y-M-D (Solaris 7 / POSIX date)
function today_ymd() {
    date +"%Y-%m-%d"
}

# ------------------ ABOUT BOX ------------------
function about_box() {
    dialog --backtitle "$BACKTITLE" \
           --title "About" \
           --msgbox "INITECH VAPID\nCreated by ChatGPT" 8 40
}

# ------------------ VENDOR MASTER ------------------

function add_vendor() {
    local NAME ADDRESS PHONE LAST_ID
    NAME=$(dialog --inputbox "Enter Vendor Name:" 8 50 3>&1 1>&2 2>&3) || return
    ADDRESS=$(dialog --inputbox "Enter Address:" 8 50 3>&1 1>&2 2>&3) || return
    PHONE=$(dialog --inputbox "Enter Phone:" 8 50 3>&1 1>&2 2>&3) || return

    LAST_ID=$(next_id "$VENDOR_DB")
    echo "$LAST_ID|$NAME|$ADDRESS|$PHONE" >> "$VENDOR_DB"
    dialog --msgbox "Vendor added successfully." 7 50
}

function view_vendors() {
    if [[ ! -s "$VENDOR_DB" ]]; then
        dialog --msgbox "No vendors found." 7 50
        return
    fi
    awk -F'|' 'BEGIN{
        printf "%-4s %-20s %-30s %-14s\n","ID","Vendor","Address","Phone";
        print  "--------------------------------------------------------------------------";
    }
    { printf "%-4s %-20s %-30s %-14s\n",$1,$2,$3,$4 }' "$VENDOR_DB" > /tmp/vendors.txt
    dialog --title "Vendors" --textbox /tmp/vendors.txt 20 72
    rm -f /tmp/vendors.txt
}

function edit_vendor() {
    if [[ ! -s "$VENDOR_DB" ]]; then
        dialog --msgbox "No vendors to edit." 7 50
        return
    fi
    local LIST ID OLD NAME ADDRESS PHONE
    LIST=$(awk -F'|' '{printf "%s \"%s\"\n",$1,$2}' "$VENDOR_DB")
    ID=$(eval dialog --menu \"Select vendor to edit:\" 20 60 15 $LIST 3>&1 1>&2 2>&3) || return

    OLD=$(grep "^$ID|" "$VENDOR_DB")
    NAME=$(dialog --inputbox "Edit Vendor Name:" 8 50 "$(echo "$OLD"|cut -d'|' -f2)" 3>&1 1>&2 2>&3) || return
    ADDRESS=$(dialog --inputbox "Edit Address:" 8 50 "$(echo "$OLD"|cut -d'|' -f3)" 3>&1 1>&2 2>&3) || return
    PHONE=$(dialog --inputbox "Edit Phone:" 8 50 "$(echo "$OLD"|cut -d'|' -f4)" 3>&1 1>&2 2>&3) || return

    grep -v "^$ID|" "$VENDOR_DB" > "$VENDOR_DB.tmp" && mv "$VENDOR_DB.tmp" "$VENDOR_DB"
    echo "$ID|$NAME|$ADDRESS|$PHONE" >> "$VENDOR_DB"
    sort -t'|' -k1,1n "$VENDOR_DB" -o "$VENDOR_DB"
    dialog --msgbox "Vendor updated successfully." 7 50
}

function delete_vendor() {
    if [[ ! -s "$VENDOR_DB" ]]; then
        dialog --msgbox "No vendors to delete." 7 50
        return
    fi
    local LIST ID NAME
    LIST=$(awk -F'|' '{printf "%s \"%s\"\n",$1,$2}' "$VENDOR_DB")
    ID=$(eval dialog --menu \"Select vendor to delete:\" 20 60 15 $LIST 3>&1 1>&2 2>&3) || return
    NAME=$(awk -F'|' -v id="$ID" '$1==id{print $2}' "$VENDOR_DB")
    dialog --yesno "Delete vendor: $NAME ?" 7 50 || return
    grep -v "^$ID|" "$VENDOR_DB" > "$VENDOR_DB.tmp" && mv "$VENDOR_DB.tmp" "$VENDOR_DB"
    dialog --msgbox "Vendor deleted." 7 50
}

function vendor_master_menu() {
    while true; do
        local SUB
        SUB=$(dialog --clear \
            --backtitle "$BACKTITLE" \
            --title "Maintain Vendor Master" \
            --menu "Select a function" 15 60 5 \
            1 "Add Vendor" \
            2 "Edit Vendor" \
            3 "Delete Vendor" \
            4 "View Vendors" \
            5 "Return to Main Menu" \
            3>&1 1>&2 2>&3) || { clear; return; }
        clear
        case "$SUB" in
            1) add_vendor ;;
            2) edit_vendor ;;
            3) delete_vendor ;;
            4) view_vendors ;;
            5) break ;;
            *) dialog --msgbox "Invalid option." 7 40 ;;
        esac
    done
}

# ------------------ ACCOUNTS PAYABLE ------------------

# Add vendor invoice (choose vendor from master)
function add_vendor_invoice() {
    if [[ ! -s "$VENDOR_DB" ]]; then
        dialog --msgbox "No vendors exist. Add a vendor first." 7 50
        return
    fi
    local VLIST VID INVOICE_NUM AMOUNT DUE_DATE STATUS ID
    VLIST=$(awk -F'|' '{printf "%s \"%s\"\n",$1,$2}' "$VENDOR_DB")
    VID=$(eval dialog --menu \"Select Vendor:\" 20 60 15 $VLIST 3>&1 1>&2 2>&3) || return

    INVOICE_NUM=$(dialog --inputbox "Enter Invoice Number:" 8 50 3>&1 1>&2 2>&3) || return
    AMOUNT=$(dialog --inputbox "Enter Invoice Amount (e.g. 1234.56):" 8 50 3>&1 1>&2 2>&3) || return
    DUE_DATE=$(dialog --inputbox "Enter Due Date (YYYY-MM-DD):" 8 50 3>&1 1>&2 2>&3) || return
    STATUS="Unpaid"

    ID=$(next_id "$VENDOR_INVOICES_DB")
    echo "$ID|$VID|$INVOICE_NUM|$AMOUNT|$DUE_DATE|$STATUS||" >> "$VENDOR_INVOICES_DB"
    dialog --msgbox "Vendor invoice recorded." 7 40
}

# View all unpaid vendor invoices (preload vendor names)
view_accounts_payable() {
    # Check file exists and is non-empty
    if [ ! -f "$VENDOR_INVOICES_DB" ] || [ ! -s "$VENDOR_INVOICES_DB" ]; then
        dialog --msgbox "Vendor invoice file not found or empty:\n$VENDOR_INVOICES_DB" 8 60
        return
    fi

    # Build output and count unpaid after normalizing fields
    "$AWK" -F'|' -v VDB="$VENDOR_DB" '
    function trim(s){ sub(/^[[:space:]]+/,"",s); sub(/[[:space:]]+$/,"",s); gsub(/\r/,"",s); return s }
    BEGIN{
        # preload vendor names
        while ((getline L < VDB) > 0) { split(L,a,"|"); id=trim(a[1]); if(id!="") vname[id]=trim(a[2]); }
        close(VDB);
        printf "%-4s %-20s %-12s %-10s %-12s %-8s\n","ID","Vendor","Invoice #","Amount","Due Date","Status";
        print  "-------------------------------------------------------------------------------";
        rows=0;
    }
    {
        # normalize fields
        for(i=1;i<=NF;i++){ $i=trim($i) }
        status=$6; if(status=="") status="Unpaid";
        if (status=="Unpaid") {
            vend=(vname[$2]?vname[$2]:"UNKNOWN");
            printf "%-4s %-20s %-12s %-10s %-12s %-8s\n", $1, vend, $3, $4, $5, status;
            rows++;
        }
    }
    END{ if(rows==0) exit 99; }
    ' "$VENDOR_INVOICES_DB" > /tmp/ap_view.txt

    if [ $? -eq 99 ]; then
        dialog --msgbox "No UNPAID vendor invoices found in:\n$VENDOR_INVOICES_DB" 8 60
        return
    fi

    dialog --title "Accounts Payable (Unpaid)" --textbox /tmp/ap_view.txt 20 78
    rm -f /tmp/ap_view.txt
}


# Mark a vendor invoice as paid (menu with preloaded names)
function mark_invoice_paid() {
    if [[ ! -s "$VENDOR_INVOICES_DB" ]]; then
        dialog --msgbox "No invoices found." 7 50
        return
    fi
    local MENU ID PAYDATE PAYAMT TODAY INV_AMT
    TODAY=$(today_ymd)

    MENU=$("$AWK" -F'|' -v VDB="$VENDOR_DB" '
    function trim(s){ sub(/^[[:space:]]+/,"",s); sub(/[[:space:]]+$/,"",s); gsub(/\r/,"",s); return s }
    BEGIN{
        while ((getline L < VDB) > 0) { split(L,a,"|"); id=trim(a[1]); if(id!="") vname[id]=trim(a[2]); }
        close(VDB);
    }
    {
        for(i=1;i<=NF;i++){ $i=trim($i) }
        status=$6; if(status=="") status="Unpaid";
        if (status=="Unpaid") {
            vend=(vname[$2]?vname[$2]:"UNKNOWN");
            printf "%s \"%s - %s - $%s - Due %s\"\n", $1, vend, $3, $4, $5;
        }
    }' "$VENDOR_INVOICES_DB")

    [[ -z "$MENU" ]] && { dialog --msgbox "No unpaid invoices." 7 40; return; }
    ID=$(eval dialog --menu \"Select vendor invoice to mark PAID:\" 20 70 15 $MENU 3>&1 1>&2 2>&3) || return

    PAYDATE=$(dialog --inputbox "Payment Date (YYYY-MM-DD):" 8 50 "$TODAY" 3>&1 1>&2 2>&3) || return
    INV_AMT=$(awk -F'|' -v id="$ID" '$1==id{print $4; exit}' "$VENDOR_INVOICES_DB")
    PAYAMT=$(dialog --inputbox "Payment Amount:" 8 50 "$INV_AMT" 3>&1 1>&2 2>&3) || return

    awk -F'|' -v OFS='|' -v id="$ID" -v pdate="$PAYDATE" -v pamt="$PAYAMT" '
        $1==id { for(i=NF+1;i<=8;i++) $i=""; $6="Paid"; $7=pdate; $8=pamt; }
        { print $0 }' "$VENDOR_INVOICES_DB" > "$VENDOR_INVOICES_DB.tmp" && mv "$VENDOR_INVOICES_DB.tmp" "$VENDOR_INVOICES_DB"

    dialog --msgbox "Vendor invoice marked as PAID." 7 40
}

# AP Aging: Summary
function ap_aging_summary() {
    if [[ ! -s "$VENDOR_INVOICES_DB" ]]; then
        dialog --msgbox "No invoices found." 7 50
        return
    fi
    local TODAY
    TODAY=$(today_ymd)
    awk -F'|' -v today="$TODAY" '
    function ymd2days(y,m,d){ if(m<=2){y--;m+=12} return 365*y+int(y/4)-int(y/100)+int(y/400)+int((153*(m-3)+2)/5)+d }
    function diff(a,b){ split(a,A,"-"); split(b,B,"-"); return ymd2days(B[1],B[2],B[3])-ymd2days(A[1],A[2],A[3]); }
    function bucket(due){ od=diff(due,today);
        if(od<=0) return "Current"; else if(od<=30) return "1-30"; else if(od<=60) return "31-60"; else if(od<=90) return "61-90"; else return "90+";
    }
    $6!="Paid" {
        b=bucket($5); amt=$4+0.0; sum[b]+=amt; total+=amt;
    }
    END{
        printf "%-8s %12s\n","Bucket","Amount";
        print  "------------------------";
        printf "%-8s %12.2f\n","Current",(sum["Current"]?sum["Current"]:0);
        printf "%-8s %12.2f\n","1-30",(sum["1-30"]?sum["1-30"]:0);
        printf "%-8s %12.2f\n","31-60",(sum["31-60"]?sum["31-60"]:0);
        printf "%-8s %12.2f\n","61-90",(sum["61-90"]?sum["61-90"]:0);
        printf "%-8s %12.2f\n","90+",(sum["90+"]?sum["90+"]:0);
        print  "------------------------";
        printf "%-8s %12.2f\n","TOTAL",(total?total:0);
    }' "$VENDOR_INVOICES_DB" > /tmp/ap_aging_summary.txt
    dialog --title "AP Aging (Summary)" --textbox /tmp/ap_aging_summary.txt 18 40
    rm -f /tmp/ap_aging_summary.txt
}

# AP Aging: Detail (preload vendor names)
function ap_aging_detail() {
    if [[ ! -s "$VENDOR_INVOICES_DB" ]]; then
        dialog --msgbox "No invoices found." 7 50
        return
    fi
    local TODAY
    TODAY=$(today_ymd)
    awk -F'|' -v VDB="$VENDOR_DB" -v today="$TODAY" '
    function ymd2days(y,m,d){ if(m<=2){y--;m+=12} return 365*y+int(y/4)-int(y/100)+int(y/400)+int((153*(m-3)+2)/5)+d }
    function diff(a,b){ split(a,A,"-"); split(b,B,"-"); return ymd2days(B[1],B[2],B[3])-ymd2days(A[1],A[2],A[3]); }
    function bucket(due){ od=diff(due,today); if(od<=0) return "Current"; else if(od<=30) return "1-30"; else if(od<=60) return "31-60"; else if(od<=90) return "61-90"; else return "90+" }

    BEGIN{
        while ((getline L < VDB) > 0) { split(L,a,"|"); if(a[1]!="") vname[a[1]]=a[2]; }
        close(VDB);
        printf "%-4s %-20s %-12s %-10s %-12s %-7s %-6s\n","ID","Vendor","Invoice #","Amount","Due Date","Days","Bucket";
        print  "-------------------------------------------------------------------------------------";
    }
    $6!="Paid" {
        od=diff($5,today);
        v = (vname[$2] ? vname[$2] : "UNKNOWN");
        printf "%-4s %-20s %-12s %10.2f %-12s %7d %-6s\n", $1, v, $3, $4+0.0, $5, od, bucket($5);
    }' "$VENDOR_INVOICES_DB" > /tmp/ap_aging_detail.txt
    dialog --title "AP Aging (Detail)" --textbox /tmp/ap_aging_detail.txt 20 86
    rm -f /tmp/ap_aging_detail.txt
}

# ------------------ CUSTOMER MASTER ------------------

function add_customer() {
    local NAME ADDRESS PHONE LAST_ID
    NAME=$(dialog --inputbox "Enter Customer Name:" 8 50 3>&1 1>&2 2>&3) || return
    ADDRESS=$(dialog --inputbox "Enter Address:" 8 50 3>&1 1>&2 2>&3) || return
    PHONE=$(dialog --inputbox "Enter Phone Number:" 8 50 3>&1 1>&2 2>&3) || return
    LAST_ID=$(next_id "$CUSTOMER_DB")
    echo "$LAST_ID|$NAME|$ADDRESS|$PHONE" >> "$CUSTOMER_DB"
    dialog --msgbox "Customer added successfully." 7 50
}

function view_customers() {
    if [[ ! -s "$CUSTOMER_DB" ]]; then
        dialog --msgbox "No customers found." 7 50
        return
    fi
    awk -F'|' 'BEGIN{
        printf "%-4s %-20s %-30s %-14s\n","ID","Customer","Address","Phone";
        print  "--------------------------------------------------------------------------";
    }
    { printf "%-4s %-20s %-30s %-14s\n",$1,$2,$3,$4 }' "$CUSTOMER_DB" > /tmp/customers.txt
    dialog --title "Customer List" --textbox /tmp/customers.txt 20 72
    rm -f /tmp/customers.txt
}

function edit_customer() {
    if [[ ! -s "$CUSTOMER_DB" ]]; then
        dialog --msgbox "No customers to edit." 7 50
        return
    fi
    local CUST_LIST ID OLD NAME ADDRESS PHONE
    CUST_LIST=$(awk -F'|' '{printf "%s \"%s\"\n", $1, $2}' "$CUSTOMER_DB")
    ID=$(eval dialog --menu \"Select customer to edit:\" 20 60 15 $CUST_LIST 3>&1 1>&2 2>&3) || return

    OLD=$(grep "^$ID|" "$CUSTOMER_DB")
    NAME=$(dialog --inputbox "Edit Name:" 8 50 "$(echo "$OLD"|cut -d'|' -f2)" 3>&1 1>&2 2>&3) || return
    ADDRESS=$(dialog --inputbox "Edit Address:" 8 50 "$(echo "$OLD"|cut -d'|' -f3)" 3>&1 1>&2 2>&3) || return
    PHONE=$(dialog --inputbox "Edit Phone:" 8 50 "$(echo "$OLD"|cut -d'|' -f4)" 3>&1 1>&2 2>&3) || return

    grep -v "^$ID|" "$CUSTOMER_DB" > "$CUSTOMER_DB.tmp" && mv "$CUSTOMER_DB.tmp" "$CUSTOMER_DB"
    echo "$ID|$NAME|$ADDRESS|$PHONE" >> "$CUSTOMER_DB"
    sort -t'|' -k1,1n "$CUSTOMER_DB" -o "$CUSTOMER_DB"
    dialog --msgbox "Customer updated successfully." 7 50
}

function delete_customer() {
    if [[ ! -s "$CUSTOMER_DB" ]]; then
        dialog --msgbox "No customers to delete." 7 50
        return
    fi
    local CUST_LIST ID NAME
    CUST_LIST=$(awk -F'|' '{printf "%s \"%s\"\n", $1, $2}' "$CUSTOMER_DB")
    ID=$(eval dialog --menu \"Select customer to delete:\" 20 60 15 $CUST_LIST 3>&1 1>&2 2>&3) || return

    NAME=$(awk -F'|' -v id="$ID" '$1==id{print $2}' "$CUSTOMER_DB")
    dialog --yesno "Are you sure you want to delete \"$NAME\"?" 7 50 || return
    grep -v "^$ID|" "$CUSTOMER_DB" > "$CUSTOMER_DB.tmp" && mv "$CUSTOMER_DB.tmp" "$CUSTOMER_DB"
    dialog --msgbox "Customer deleted successfully." 7 50
}

function customer_master_menu() {
    while true; do
        local SUBCHOICE
        SUBCHOICE=$(dialog --clear \
            --backtitle "$BACKTITLE" \
            --title "Maintain Customer Master" \
            --menu "Select a customer master function" 15 60 5 \
            1 "Add Customer" \
            2 "Edit Customer" \
            3 "Delete Customer" \
            4 "View Customers" \
            5 "Return to Main Menu" \
            3>&1 1>&2 2>&3) || { clear; return; }
        clear
        case $SUBCHOICE in
            1) add_customer ;;
            2) edit_customer ;;
            3) delete_customer ;;
            4) view_customers ;;
            5) break ;;
            *) dialog --title "Error" --msgbox "Invalid option. Please try again." 7 50 ;;
        esac
    done
}

# ------------------ ACCOUNTS RECEIVABLE ------------------

# Add customer invoice (choose customer from master)
function add_customer_invoice() {
    if [[ ! -s "$CUSTOMER_DB" ]]; then
        dialog --msgbox "No customers exist. Add a customer first." 7 50
        return
    fi
    local CLIST CID INVOICE_NUM AMOUNT DUE_DATE STATUS ID
    CLIST=$(awk -F'|' '{printf "%s \"%s\"\n",$1,$2}' "$CUSTOMER_DB")
    CID=$(eval dialog --menu \"Select Customer:\" 20 60 15 $CLIST 3>&1 1>&2 2>&3) || return

    INVOICE_NUM=$(dialog --inputbox "Enter Invoice Number:" 8 50 3>&1 1>&2 2>&3) || return
    AMOUNT=$(dialog --inputbox "Enter Invoice Amount (e.g. 1234.56):" 8 50 3>&1 1>&2 2>&3) || return
    DUE_DATE=$(dialog --inputbox "Enter Due Date (YYYY-MM-DD):" 8 50 3>&1 1>&2 2>&3) || return
    STATUS="Unpaid"

    ID=$(next_id "$CUSTOMER_INVOICES_DB")
    echo "$ID|$CID|$INVOICE_NUM|$AMOUNT|$DUE_DATE|$STATUS||" >> "$CUSTOMER_INVOICES_DB"
    dialog --msgbox "Customer invoice recorded." 7 40
}

# View all unpaid customer invoices (preload customer names)
function view_accounts_receivable() {
    if [[ ! -s "$CUSTOMER_INVOICES_DB" ]]; then
        dialog --msgbox "No customer invoices found." 7 50
        return
    fi
    awk -F'|' -v CDB="$CUSTOMER_DB" '
    BEGIN{
        while ((getline L < CDB) > 0) { split(L,a,"|"); if (a[1]!="") cname[a[1]]=a[2]; }
        close(CDB);
        printf "%-4s %-20s %-12s %-10s %-12s %-8s\n","ID","Customer","Invoice #","Amount","Due Date","Status";
        print  "-------------------------------------------------------------------------------";
    }
    ($6=="Unpaid" || $6=="") {
        c = (cname[$2] ? cname[$2] : "UNKNOWN");
        printf "%-4s %-20s %-12s %-10s %-12s %-8s\n", $1, c, $3, $4, $5, ($6==""?"Unpaid":$6);
    }' "$CUSTOMER_INVOICES_DB" > /tmp/ar_view.txt
    dialog --title "Accounts Receivable (Unpaid)" --textbox /tmp/ar_view.txt 20 78
    rm -f /tmp/ar_view.txt
}

# Record a customer payment (preload names in menu)
function mark_customer_invoice_paid() {
    if [[ ! -s "$CUSTOMER_INVOICES_DB" ]]; then
        dialog --msgbox "No invoices found." 7 50
        return
    fi
    local MENU ID PAYDATE PAYAMT TODAY INV_AMT
    TODAY=$(today_ymd)

    MENU=$(awk -F'|' -v CDB="$CUSTOMER_DB" '
    BEGIN{
        while ((getline L < CDB) > 0) { split(L,a,"|"); if (a[1]!="") cname[a[1]]=a[2]; }
        close(CDB);
    }
    ($6=="Unpaid" || $6=="") {
        c = (cname[$2] ? cname[$2] : "UNKNOWN");
        printf "%s \"%s - %s - $%s - Due %s\"\n", $1, c, $3, $4, $5;
    }' "$CUSTOMER_INVOICES_DB")

    [[ -z "$MENU" ]] && { dialog --msgbox "No unpaid customer invoices." 7 40; return; }
    ID=$(eval dialog --menu \"Select customer invoice to mark PAID:\" 20 70 15 $MENU 3>&1 1>&2 2>&3) || return

    PAYDATE=$(dialog --inputbox "Payment Date (YYYY-MM-DD):" 8 50 "$TODAY" 3>&1 1>&2 2>&3) || return
    INV_AMT=$(awk -F'|' -v id="$ID" '$1==id{print $4; exit}' "$CUSTOMER_INVOICES_DB")
    PAYAMT=$(dialog --inputbox "Payment Amount:" 8 50 "$INV_AMT" 3>&1 1>&2 2>&3) || return

    awk -F'|' -v OFS='|' -v id="$ID" -v pdate="$PAYDATE" -v pamt="$PAYAMT" '
        $1==id { for(i=NF+1;i<=8;i++) $i=""; $6="Paid"; $7=pdate; $8=pamt; }
        { print $0 }' "$CUSTOMER_INVOICES_DB" > "$CUSTOMER_INVOICES_DB.tmp" && mv "$CUSTOMER_INVOICES_DB.tmp" "$CUSTOMER_INVOICES_DB"

    dialog --msgbox "Customer payment recorded." 7 40
}

# AR Aging: Summary
function ar_aging_summary() {
    if [[ ! -s "$CUSTOMER_INVOICES_DB" ]]; then
        dialog --msgbox "No customer invoices found." 7 50
        return
    fi
    local TODAY
    TODAY=$(today_ymd)
    awk -F'|' -v today="$TODAY" '
    function ymd2days(y,m,d){ if(m<=2){y--;m+=12} return 365*y+int(y/4)-int(y/100)+int(y/400)+int((153*(m-3)+2)/5)+d }
    function diff(a,b){ split(a,A,"-"); split(b,B,"-"); return ymd2days(B[1],B[2],B[3])-ymd2days(A[1],A[2],A[3]); }
    function bucket(due){ od=diff(due,today);
        if(od<=0) return "Current"; else if(od<=30) return "1-30"; else if(od<=60) return "31-60"; else if(od<=90) return "61-90"; else return "90+";
    }
    $6!="Paid" {
        b=bucket($5); amt=$4+0.0; sum[b]+=amt; total+=amt;
    }
    END{
        printf "%-8s %12s\n","Bucket","Amount";
        print  "------------------------";
        printf "%-8s %12.2f\n","Current",(sum["Current"]?sum["Current"]:0);
        printf "%-8s %12.2f\n","1-30",(sum["1-30"]?sum["1-30"]:0);
        printf "%-8s %12.2f\n","31-60",(sum["31-60"]?sum["31-60"]:0);
        printf "%-8s %12.2f\n","61-90",(sum["61-90"]?sum["61-90"]:0);
        printf "%-8s %12.2f\n","90+",(sum["90+"]?sum["90+"]:0);
        print  "------------------------";
        printf "%-8s %12.2f\n","TOTAL",(total?total:0);
    }' "$CUSTOMER_INVOICES_DB" > /tmp/ar_aging_summary.txt
    dialog --title "AR Aging (Summary)" --textbox /tmp/ar_aging_summary.txt 18 40
    rm -f /tmp/ar_aging_summary.txt
}

# AR Aging: Detail (preload customer names)
function ar_aging_detail() {
    if [[ ! -s "$CUSTOMER_INVOICES_DB" ]]; then
        dialog --msgbox "No customer invoices found." 7 50
        return
    fi
    local TODAY
    TODAY=$(today_ymd)
    awk -F'|' -v CDB="$CUSTOMER_DB" -v today="$TODAY" '
    function ymd2days(y,m,d){ if(m<=2){y--;m+=12} return 365*y+int(y/4)-int(y/100)+int(y/400)+int((153*(m-3)+2)/5)+d }
    function diff(a,b){ split(a,A,"-"); split(b,B,"-"); return ymd2days(B[1],B[2],B[3])-ymd2days(A[1],A[2],A[3]); }
    function bucket(due){ od=diff(due,today); if(od<=0) return "Current"; else if(od<=30) return "1-30"; else if(od<=60) return "31-60"; else if(od<=90) return "61-90"; else return "90+" }

    BEGIN{
        while ((getline L < CDB) > 0) { split(L,a,"|"); if(a[1]!="") cname[a[1]]=a[2]; }
        close(CDB);
        printf "%-4s %-20s %-12s %-10s %-12s %-7s %-6s\n","ID","Customer","Invoice #","Amount","Due Date","Days","Bucket";
        print  "-------------------------------------------------------------------------------------";
    }
    $6!="Paid" {
        od=diff($5,today);
        c = (cname[$2] ? cname[$2] : "UNKNOWN");
        printf "%-4s %-20s %-12s %10.2f %-12s %7d %-6s\n", $1, c, $3, $4+0.0, $5, od, bucket($5);
    }' "$CUSTOMER_INVOICES_DB" > /tmp/ar_aging_detail.txt
    dialog --title "AR Aging (Detail)" --textbox /tmp/ar_aging_detail.txt 20 86
    rm -f /tmp/ar_aging_detail.txt
}

# ------------------ REPORTS MENU ------------------

function reports_menu() {
    while true; do
        local R
        R=$(dialog --clear \
            --backtitle "$BACKTITLE" \
            --title "Reports" \
            --menu "Select a report" 16 64 7 \
            1 "AP Aging - Summary" \
            2 "AP Aging - Detail" \
            3 "AR Aging - Summary" \
            4 "AR Aging - Detail" \
            5 "Return to Main Menu" \
            3>&1 1>&2 2>&3) || { clear; return; }
        clear
        case "$R" in
            1) ap_aging_summary   ;;
            2) ap_aging_detail    ;;
            3) ar_aging_summary   ;;
            4) ar_aging_detail    ;;
            5) break              ;;
            *) dialog --msgbox "Invalid option." 7 40 ;;
        esac
    done
}

# ------------------ MAIN MENU ------------------

while true; do
    CHOICE=$(dialog --clear \
        --backtitle "$BACKTITLE" \
        --title "$TITLE" \
        --menu "Main Menu - Select an Option" 22 76 13 \
        1 "View Accounts Payable (Unpaid)" \
        2 "Enter Vendor Invoice" \
        3 "Mark Vendor Invoice Paid" \
        4 "Maintain Vendor Master" \
        5 "View Accounts Receivable (Unpaid)" \
        6 "Enter Customer Invoice" \
        7 "Record Customer Payment" \
        8 "Maintain Customer Master" \
        9 "Generate Reports" \
        10 "About" \
        11 "Exit" \
        3>&1 1>&2 2>&3)

    clear
    case $CHOICE in
        1) view_accounts_payable ;;
        2) add_vendor_invoice ;;
        3) mark_invoice_paid ;;
        4) vendor_master_menu ;;
        5) view_accounts_receivable ;;
        6) add_customer_invoice ;;
        7) mark_customer_invoice_paid ;;
        8) customer_master_menu ;;
        9) reports_menu ;;
        10) about_box ;;
        11) dialog --title "Exit" --msgbox "Thank you for using INITECH Financial Systems." 7 50; break ;;
        *) dialog --title "Error" --msgbox "Invalid option. Please try again." 7 50 ;;
    esac
done

